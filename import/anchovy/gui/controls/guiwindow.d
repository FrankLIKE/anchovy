/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.gui.controls.guiwindow;

import std.array;

import anchovy.gui.all;

public class GuiWindow : WidgetContainer
{
public:

	this(IGuiRenderer guiRenderer, TimerManager timerManager, Rect rect, GuiSkin globalSkin)
	in
	{
		assert(guiRenderer);
		assert(globalSkin);
		assert(timerManager);
	}
	body
	{
		super(rect, "", globalSkin);
		_staticRect = rect;

		_guiRenderer = guiRenderer;
		_timerManager = timerManager;
	}

	/// Handler for draw event.
	/// 
	/// Must be called by user application.
	void draw()
	{
		foreach_reverse(widget; _children)
		{
			widget.draw(_guiRenderer);
		}
		glScissor(0, 0, _rect.width, _rect.height);
	}

	/// Handler for key press event.
	/// 
	/// Must be called by user application.
	override bool keyPressed(in KeyCode key, KeyModifiers modifiers)
	{
		if (_focusedWidget !is null)
		{
			_focusedWidget.keyPressed(key, modifiers);
			return true;
		}
		return false;
	}

	/// Handler for key release event.
	/// 
	/// Must be called by user application.
	override bool keyReleased(in KeyCode key, KeyModifiers modifiers)
	{
		if (_focusedWidget !is null)
		{
			_focusedWidget.keyReleased(key, modifiers);
			return true;
		}
		return false;
	}

	/// Handler for char enter event.
	/// 
	/// Must be called by user application.
	override bool charEntered(in dchar chr)
	{
		if (_focusedWidget !is null)
		{
			_focusedWidget.charEntered(chr);
			return true;
		}
		return false;
	}

	/// Handler for pointer press event.
	/// 
	/// Must be called by user application.
	override bool pointerPressed(ivec2 pointerPosition, PointerButton button)
	{

		foreach_reverse(widget; _children)
		{
			if (widget.pointerPressed(pointerPosition, button))
			{
				Widget pressedWidget = _hoveredWidget;
				return true;
			}
		}

		focusedWidget = null;

		return false;
	}

	/// Handler for pointer release event.
	/// 
	/// Must be called by user application.
	override bool pointerReleased(ivec2 pointerPosition, PointerButton button)
	{
		if (_inputOwnerWidget !is null)
		{
			if (_inputOwnerWidget.pointerReleased(pointerPosition, button))
				return true;
		}
		foreach_reverse(widget; _children)
		{
			if (widget.pointerReleased(pointerPosition, button))
			{
				return true;
			}
		}

		inputOwnerWidget = null;
		return false;
	}


	/// Handler for pointer move event.
	/// 
	/// Must be called by user application.
	override bool pointerMoved(ivec2 newPointerPosition)
	{
		if (_inputOwnerWidget !is null)
		{
			_inputOwnerWidget.pointerMoved(newPointerPosition);
			return true;
		}
		foreach_reverse(widget; _children)
		{
			if (widget.pointerMoved(newPointerPosition))
			{
				return true;
			}
		}

		hoveredWidget = null;

		return false;
	}

	override GuiWindow window() @property @safe pure
	{
		return this;
	}

	/// Used to get last clicked widget
	Widget lastClickedWidget() @property @safe pure
	{
		return _lastClickedWidget;
	}

	/// Used to set last clicked widget
	void lastClickedWidget(Widget widget) @property @safe pure
	{
		_lastClickedWidget = widget;
	}

	/// Used to get current hovered widget
	Widget hoveredWidget() @property @safe pure
	{
		return _hoveredWidget;
	}

	/// Used to set current hovered widget
	void hoveredWidget(Widget widget) @property @trusted
	{
		if (_hoveredWidget !is widget)
		{
			if (_hoveredWidget !is null)
			{
				_hoveredWidget.pointerLeaved();
			}
			if (widget !is null)
			{
				widget.pointerEntered();
			}
			_hoveredWidget = widget;
		}
	}

	/// Used to get current focused input owner widget
	Widget inputOwnerWidget() @property @safe pure
	{
		return _inputOwnerWidget;
	}

	/// Used to set current focused input owner widget
	void inputOwnerWidget(Widget widget) @property @trusted
	{
		debug writeln("new input owner widget ", widget);
		_inputOwnerWidget = widget;
	}

	/// Used to get current focused widget
	Widget focusedWidget() @property @safe pure
	{
		return _focusedWidget;
	}

	/// Used to set current focused widget
	void focusedWidget(Widget widget) @property
	{
		if (_focusedWidget !is widget)
		{
			if (_focusedWidget !is null)
			{
				_focusedWidget.focusLost();
			}
			if (widget !is null)
			{
				widget.focusGained();
			}
			_focusedWidget = widget;
		}
	}

	/// Used to get current clipboard string
	dstring clipboardString() @property
	{
		if (_getClipboardStringCallback !is null) 
			return _getClipboardStringCallback();
		else
			return "";
	}

	/// Used to set current clipboard string
	void clipboardString(dstring newString) @property
	{
		if (_setClipboardStringCallback !is null) 
			_setClipboardStringCallback(newString);
	}

	/// Will be used by window to provide clipboard functionality.
	void getClipboardStringCallback(dstring delegate() callback) @property
	{
		_getClipboardStringCallback = callback;
	}

	/// ditto
	void setClipboardStringCallback(void delegate(dstring) callback) @property
	{
		_setClipboardStringCallback = callback;
	}

	/// Used to set currently checked radio button in the group.
	/// Previous checked radio button in specified group will be unchecked.
	void setCheckedForGroup(uint group, RadioButton rbutton)
	{
		if ((group in _checkGroups) !is null)
		{
			_checkGroups[group].isChecked = false;
		}
		_checkGroups[group] = rbutton;

		if (rbutton !is null)
			rbutton.isChecked = true;
	}

	TimerManager timerManager() @property
	{
		return _timerManager;
	}

protected:


	/// Gui renderer used for drawing all children widgets.
	IGuiRenderer	_guiRenderer;

	/// Used for timers.
	TimerManager	_timerManager;

	/// Current input owner If set, this widget will receive all pointer moved events.
	/// See_Also: inputOwnerWidget
	Widget		_inputOwnerWidget;

	/// Currently dragging widget. Will receive onDrag events.
	Widget		_draggingWidget;

	/// Last clicked widget. Used for double-click checking.
	/// See_Also: lastClickedWidget
	Widget		_lastClickedWidget;

	/// Hovered widget. Widget over which pointer is located.
	/// See_Also: hoveredWidget
	Widget		_hoveredWidget;

	/// Focused widget.
	/// 
	/// Will receive all key events if input is not grabbed by other widget.
	Widget		_focusedWidget;

	/// Stores checked radio button for each radio group.
	/// See_Also: setCheckedForGroup
	RadioButton[uint] _checkGroups;

	/// This will be called when widget sets clipboard string.
	void delegate(dstring newClipboardString) _setClipboardStringCallback;

	/// This will be called when widget requests clipboard string.
	dstring delegate() _getClipboardStringCallback;
}
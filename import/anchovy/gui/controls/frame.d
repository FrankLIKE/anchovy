/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.gui.controls.frame;

import anchovy.gui.all;

class Frame : WidgetContainer
{
	this()
	{
		super();
		style = "frame";
		/*ImageButton ib = new ImageButton();
		ib.style = "closeButton";
		ib.position = ivec2(prefferedSize.width - (7 + 18), 6);
		ib.anchor = Sides.RIGHT | Sides.TOP;
		ib.addEventHandler(&closePressed);
		ib.parent = this;
		_children ~= ib;
		++_internalCount;*/

		_layout = new AbsoluteLayout();
		
		
	}

	/*override void calcStaticRect(Rect parentStaticRect) @trusted
	{
		_staticRect = _rect.relativeToParent(parentStaticRect);
		foreach_reverse(widget; _children[0.._internalCount])
		{
			widget.calcStaticRect(_staticRect);
		}

		_clientArea = _staticRect.croppedByOffset(_skin[_styleName]["normal"].contentPadding);
		foreach_reverse(widget; _children[_internalCount..$])
		{
			widget.calcStaticRect(_clientArea);
		}
	}*/

	override IWidget[] children() @property
	{
		return _children[_internalCount..$];
	}

	/*bool pointerPressed(PointerPressEvent event,ivec2 pointerPosition, PointerButton button)
	{
		if (event.button == PointerButton.PB_LEFT && event.sinking)
		{
			uint topBorder = _skin[_styleName]["normal"].fixedBorders.top;

			if (_clientArea.contains(pointerPosition))
			{
				foreach_reverse(widget; _children[_internalCount..$])
				{
					if (widget.pointerPressed(pointerPosition, button))
					{
						return true;
					}
				}
				window.focusedWidget = this;
			}
			else if (Rect(_staticRect.x, _staticRect.y, _staticRect.width, topBorder).contains(pointerPosition))
			{
				foreach_reverse(widget; _children[0.._internalCount])
				{
					if (widget.pointerPressed(pointerPosition, button))
					{
						return true;
					}
				}

				debug writeln("grabbed");
				window.inputOwnerWidget = this;
				_dragPosition = pointerPosition;
				return true;
			}
			else if(Rect(_staticRect.x + _staticRect.width-6, _staticRect.y + _staticRect.height - 6, 6, 6).contains(pointerPosition))
			{
				//debug writeln("resizing");
				_isResizing = true;
				window.inputOwnerWidget = this;
				_dragPosition = pointerPosition;
				return true;
			}
		}
		return true;
	}

	override bool pointerMoved(ivec2 newPointerPosition)
	{
		if (window.inputOwnerWidget is this)
		{
			ivec2 deltaPos = newPointerPosition - _dragPosition;

			if (_isResizing)
			{
				discardGeometry();

				Rect newRect = _rect.growed(deltaPos);
				newRect.clampSize(_prefferedSize, uvec2(uint.max, uint.max));
				ivec2 deltaSize = ivec2(newRect.width - _rect.width, newRect.height - _rect.height);
				_dragPosition += deltaSize;
				if (deltaSize.x != 0 || deltaSize.y != 0)
					updateLayoutResize(deltaSize);
			}
			else
			{
				_dragPosition = newPointerPosition;
				_rect.move(deltaPos);
				calcStaticRect(_parent.staticRect);
			}
		}
		else if(_staticRect.contains(newPointerPosition))
		{
			foreach_reverse(widget; _children[0.._internalCount])
			{
				if (widget.pointerMoved(newPointerPosition))
				{
					return true;
				}
			}
			foreach_reverse(widget; _children[_internalCount..$])
			{
				if (widget.pointerMoved(newPointerPosition))
				{
					return true;
				}
			}
			window.hoveredWidget = this;

			return true;
		}
		return false;
	}

	override bool pointerReleased(ivec2 pointerPosition, PointerButton button)
	{
		if (window.inputOwnerWidget == this)
		{
			window.inputOwnerWidget = null;
			_isResizing = false;
			_draggingSides = 0;
		}
		if (!_staticRect.contains(pointerPosition)) return false;
		if (button == PointerButton.PB_LEFT)
		{
			foreach_reverse(widget; _children)
			{
				if (widget.pointerReleased(pointerPosition, button))
				{
					return true;
				}
			}
		}
		return true;
	}*/

	void onClose(bool delegate(PointerClickEvent) newHandler) @property
	{ 
		//_onClose = newHandler;
	}

	/*bool closePressed(PointerClickEvent event)
	{
		if (_onClose !is null) _onClose(this);
		return true;
	}*/

protected:

	override void updateLayout()
	{
		assert(_layout);
		_layout.layoutContainer(prefferedSize, _children[0.._internalCount]);
		_layout.layoutContainer(ivec2(_clientArea.width, _clientArea.height), _children[_internalCount..$]);
	}
	
	override void updateLayoutResize(ivec2 deltaSize)
	{
		assert(_layout);
		_layout.onContainerResized(prefferedSize, ivec2(prefferedSize.x + deltaSize.x, prefferedSize.y + deltaSize.y), _children[0.._internalCount]);
		_layout.onContainerResized(ivec2(_clientArea.width, _clientArea.height),
		                                  ivec2(_clientArea.width+deltaSize.x, _clientArea.height + deltaSize.y),
		                                  _children[_internalCount..$]);
		userSize = ivec2(userSize.x + deltaSize.x, userSize.y + deltaSize.y);
		updateStaticPositionChildren();
	}

private:

	Rect _clientArea;

	/// Used for calculating dragging delta position.
	ivec2 _dragPosition;

	/// True if frame is being currently dragging or resizing.
	bool _isResizing;

	/// Can have up to 2 side dragged simultaneously.
	/// If 2 sides are dragged, they must be adjacent, so it will mean that the corner is dragged.
	/// Constructed by ORing Sides enumeration.
	uint _draggingSides;

	/// Count of internal widgets.
	/// Will be moved to WidgetContainer.
	uint _internalCount;
}


/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.gui.controls.edit;

import std.algorithm;
import std.stdio;

import anchovy.gui.all;

class Edit : Widget
{
	this()
	{
		super();
		addEventHandler(&keyPressed);
		addEventHandler(&keyReleased);
		addEventHandler(&charEntered);
		addEventHandler(&focusGained);
		addEventHandler(&focusLost);
		addEventHandler(&pointerPressed);
		addEventHandler(&pointerReleased);
		addEventHandler(&pointerMoved);
		
		_isFocusable = true;
		
		style = "edit";
		_textLine = new TextLine("", null);
	}

	bool keyPressed(KeyPressEvent event)
	{
		if (!_isEditable) return true;
		
		bool doTextUpdate = true;
		bool doDeselect = true;

		if (event.modifiers & KeyModifiers.CONTROL)
		{
			if (event.keyCode == KeyCode.KEY_C)
			{
				event.gui.clipboardString = copy();
				doDeselect = false;
			}		
			else if (event.keyCode == KeyCode.KEY_V)
			{
				paste(event.gui.clipboardString);
			}	
			else if (event.keyCode == KeyCode.KEY_X)
			{
				event.gui.clipboardString = copy();
				removeSelectedText();
			}
			else
			{
				doTextUpdate = false;
			}
		}
		else if (event.keyCode == KeyCode.KEY_BACKSPACE)
		{
			if (_hasSelectedText)
			{
				removeSelectedText();
			}
			else if (_textLine.text.length > 0 && _cursorPos > 0)
			{
				_cursorRenderPos -= _textLine.font.getGlyph(_textLine.text[_cursorPos-1]).metrics.advanceX;
				_textLine.text = _textLine.text[0.._cursorPos-1] ~ _textLine.text[_cursorPos..$];
				--_cursorPos;
				onCursorMove();
			}
		}
		else if (event.keyCode == KeyCode.KEY_LEFT)
		{
			moveCursorLeft();
		}
		else if (event.keyCode == KeyCode.KEY_RIGHT)
		{
			moveCursorRight();
		}
		else if (event.keyCode == KeyCode.KEY_DELETE)
		{
			if (_hasSelectedText)
			{
				removeSelectedText();
			}
			else if (_cursorPos < _textLine.text.length)
			{
				_textLine.text = _textLine.text[0.._cursorPos]~_textLine.text[_cursorPos+1..$];
				onCursorMove();
			}
		}
		else if (event.keyCode == KeyCode.KEY_HOME)
		{
			setCursorPos(0);
		}
		else if (event.keyCode == KeyCode.KEY_END)
		{
			setCursorPos(_textLine.text.length);
		}
		else
		{
			doTextUpdate = false;
		}
		
		if (doTextUpdate)
		{
			calcTextXPos();
			if (doDeselect)
			{
				deselect();
			}
		}
		
		return true;
	}
	
	bool keyReleased(KeyReleaseEvent)
	{
		return true;
	}

	/// Set current cursor blink interval in seconds.
	/// newInterval must be greater than zero.
	void blinkInterval(double newInterval) @property
	in
	{
		assert(newInterval > 0);
	}
	body
	{
		_blinkInterval = newInterval;
		if (_blinkTimer) _blinkTimer.delay = newInterval;
	}

	/// Get current cursor blink interval in seconds.
	double blinkInterval() @property
	{
		return _blinkInterval;
	}

	void paste(dstring text)
	{
		removeSelectedText();
		_textLine.text = _textLine.text[0.._cursorPos] ~ text ~ _textLine.text[_cursorPos..$];
		setCursorPos(_cursorPos + text.length);
	}
	
	bool charEntered(CharEnterEvent event)
	{
		if (_isEditable)
		{
			normalizeSelection();
			_textLine.text = _textLine.text[0.._selectionStart] ~ event.character ~ _textLine.text[_selectionEnd..$];
			setCursorPos(_selectionStart+1);
			deselect();
			calcTextXPos();
		}

		return true;
	}

	dstring copy()
	{
		return selectedText();
	}

	override void doDraw(IGuiRenderer renderer) 
	{
		renderer.drawControlBack(this, staticRect);
		assert(_textLine);
		renderer.pushClientArea(staticRect);
			renderer.renderer.setColor(Color(0,0,0));
			renderer.drawTextLine(_textLine, staticRect.croppedByOffset(_contentOffset), AlignmentType.NONE_CENTER);
			if (_state == "focused" && _isCursorVisible && _isCursorBlinkVisible)
			{
				renderer.renderer.fillRect(Rect(_staticPosition.x + _cursorRenderPos + _textLine.x + _contentOffset.left,
			                                	_staticPosition.y + _userSize.y/2 - _textLine.height/2,
			                                	1, _textLine.height));
			}
			if (_hasSelectedText)
			{
				renderer.renderer.setColor(Color(0,0,255, 64));
				uint selectionStartX = calcCharOffset(_selectionStart);
					renderer.renderer.fillRect(Rect(_staticPosition.x + _textLine.x + _contentOffset.left + selectionStartX,
				                                	_staticPosition.y + _userSize.y/2 - _textLine.height/2,
					                               	calcCharOffset(_selectionEnd) - selectionStartX, _textLine.height));
			}
		renderer.popClientArea;
	}

	override void handleResize() @trusted
	{
		calcTextXPos();
	}

	void focusGained(FocusGainEvent event)
	out
	{
		assert(_blinkTimer);
	}
	body
	{
		assert(_blinkTimer is null);
		assert(_isCursorBlinkVisible);
		_state = "focused";
		_gui = event.gui;

		_blinkTimer = event.gui.timerManager.addTimer(_blinkInterval, &onCursorBlink, double.nan, TimerTickType.PROCESS_LAST);
		
		return true;
	}

	/// Used as a callback to blink timer.
	protected double onCursorBlink(double timesUpdated)
	{
		if ((timesUpdated % 2) > 0)
			_isCursorBlinkVisible = !_isCursorBlinkVisible;

		return 0;
	}
	
	bool focusLost(FocusLoseEvent event)
	{
		_state = "normal";

		event.gui.timerManager.stopTimer(_blinkTimer);
		_blinkTimer = null;

		_isCursorBlinkVisible = true;
		
		return true;
	}

	dstring text() @property
	{
		if (_textLine is null) return "";
		return _textLine.text;
	}
	
	void text(dstring newText) @property
	{
		if (_textLine is null) return;
		return _textLine.text = newText;
	}

	dstring selectedText() @property
	{
		if (_selectionStart > _selectionEnd)
		{
			return _textLine.text[_selectionEnd.._selectionStart];
		}
		else
		{
			return _textLine.text[_selectionStart.._selectionEnd];
		}
	}

	bool pointerPressed(PointerPressEvent event)
	{
		if (event.button == PointerButton.PB_LEFT)
		{
			event.gui.focusedWidget = this;
			moveCursorToClickPos(event.pointerPosition);
			event.gui.inputOwnerWidget = this;
			_selectionStart = _cursorPos;
			_selectionEnd = _cursorPos;
			return true;
		}

		return true;
	}

	bool pointerReleased(PointerReleaseEvent event)
	{
		if (event.gui.inputOwnerWidget != this) return false;

		if (event.button == PointerButton.PB_LEFT)
		{
			event.gui.inputOwnerWidget = null;
			return true;
		}
		
		return true;
	}

	bool pointerMoved(PointerMoveEvent event)
	{
		if (event.gui.inputOwnerWidget == this )
		{
			moveCursorToClickPos(event.pointerPosition);
			_selectionEnd = _cursorPos;
			updateSelection();
			calcTextXPos();
		}
		return true;
	}

	void isEditable(bool editable) @property
	{
		_isEditable = editable;
	}

	bool isEditable() @property
	{
		return _isEditable = true;
	}

	void removeSelectedText()
	{
		normalizeSelection();
		_textLine.text = _textLine.text[0.._selectionStart] ~ _textLine.text[_selectionEnd..$];
		setCursorPos(_selectionStart);
		deselect();
	}

	void deselect()
	{
		_selectionStart = _cursorPos;
		_selectionEnd = _cursorPos;
		_hasSelectedText = false;
	}

	void select(uint start, uint end)
	{
		_selectionStart = start;
		_selectionEnd   = end;

		normalizeSelection();
		updateSelection();
	}

protected:

	/// Swaps _selectionStart and _selectionEnd if _selectionStart > _selectionEnd.
	/// Should be used before text editing.
	void normalizeSelection()
	{
		if (_selectionStart > _selectionEnd)
		{
			uint temp = _selectionEnd;
			_selectionEnd = _selectionStart;
			_selectionStart = temp;
		}
	}

	void updateSelection()
	{
		_selectionStart = clamp!uint(_selectionStart, 0, _textLine.text.length);
		_selectionEnd = clamp!uint(_selectionEnd, 0, _textLine.text.length);

		if (_selectionEnd - _selectionStart > 0)
			_hasSelectedText = true;
		else
			_hasSelectedText = false;
	}

	override void skinChanged()
	{
		_contentOffset = _skin[_style]["normal"].contentPadding;
		_textLine.font = getStyleFont();
	}

	void moveCursorToClickPos(ivec2 pointerPosition)
	in
	{
		assert(_textLine);
	}
	body
	{
		if (_textLine.text.length > 0)
		{
			int clickX = pointerPosition.x - (_staticPosition.x + _contentOffset.left + _textLine.x);

			Font textFont = _textLine.font;
			int charCenter;
			int charX = 0;
			uint charIndex = 0;

			while (true)
			{
				charCenter = charX + (textFont.getGlyph(_textLine.text[charIndex]).metrics.advanceX/2);
				if (charCenter > clickX) break;

				charX += textFont.getGlyph(_textLine.text[charIndex]).metrics.advanceX;
				++charIndex;

				if (charIndex == _textLine.text.length) break;
			}

			_cursorPos = charIndex;
			_cursorRenderPos = charX;
		}
	}

	/// If cursor changes its position the blinking delay must be reset.
	void onCursorMove()
	{
		if (_blinkTimer)
		{
			_gui.timerManager.resetTimer(_blinkTimer);
			_isCursorBlinkVisible = true;
		}
	}

	void moveCursorRight()
	{
		if (_cursorPos < _textLine.text.length)
		{
			_cursorRenderPos += _textLine.font.getGlyph(_textLine.text[_cursorPos]).metrics.advanceX;
			++_cursorPos;
			onCursorMove();
		}
	}

	void moveCursorLeft()
	{
		if (_cursorPos > 0)
		{
			_cursorRenderPos -= _textLine.font.getGlyph(_textLine.text[_cursorPos-1]).metrics.advanceX;
			--_cursorPos;
			onCursorMove();
		}
	}

	void setCursorPos(uint position)
	{
		scope(exit) onCursorMove();

		if (position > _textLine.text.length)
		{
			_cursorPos = _textLine.text.length;
			_cursorRenderPos = _textLine.width;
			return;
		}
		else if (position < 0)
		{
			_cursorPos = 0;
			_cursorRenderPos = 0;
			return;
		}

		Font textFont = _textLine.font;
		int charX = 0;
		uint charIndex = 0;

		while (true)
		{
			if (charIndex == position) break;

			Glyph* glyph = textFont.getGlyph(_textLine.text[charIndex]);
			assert(glyph !is null);
			charX += glyph.metrics.advanceX;
			++charIndex;
			
			if (charIndex == _textLine.text.length) break;
		}

		_cursorPos = charIndex;
		_cursorRenderPos = charX;
	}

	/// Returns offset in pixels from the begining of text
	uint calcCharOffset(uint index)
	{
		if (index > _textLine.text.length)
			return _textLine.width;

		int charX = 0;
		uint charIndex = 0;
		
		while (true)
		{
			if (charIndex == index) break;
			
			charX += _textLine.font.getGlyph(_textLine.text[charIndex]).metrics.advanceX;
			++charIndex;
		}

		return charX;
	}

	void calcTextXPos()
	{
		int contentWidth = _userSize.x - _contentOffset.horizontal;
		if (_textLine.width < contentWidth)
		{
			_textLine.x = 0;
		}
		else
		{
			if (_cursorRenderPos + _textLine.x > contentWidth || _cursorPos == _textLine.text.length)
			{
				_textLine.x = contentWidth - _cursorRenderPos;
			}
			else if (_cursorRenderPos + _textLine.x < 0)
			{
				_textLine.x = -_cursorRenderPos;
			}
			else if (_textLine.x + _textLine.width < contentWidth)
			{
				_textLine.x = contentWidth - _textLine.width;
			}
		}
	}
	
protected:
	TextLine _textLine;

private:

	//hack
	Gui _gui;

	RectOffset _contentOffset;
	bool _isEditable = true;
	bool _isCursorVisible = true;
	bool _hasSelectedText = false;

	/// When blinking if true and _isCursorVisible is true, then cursor will be visible.
	bool _isCursorBlinkVisible = true;

	/// if there is no current selection _selectionStart and _selectionEnd are equal to _cursorPos.
	uint _selectionStart, _selectionEnd;

	int _cursorPos = 0;
	int _cursorRenderPos = 0;

	double _blinkInterval = 0.25f;

	/// Used for cursor blinking.
	Timer _blinkTimer;
}
